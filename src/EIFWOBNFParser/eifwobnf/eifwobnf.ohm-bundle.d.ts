// AUTOGENERATED FILE
// This file was generated from eifwobnf.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface EIFWOBNFActionDict<T> extends BaseActionDict<T> {
  Rules_head?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  Rules_tail?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Rules?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Rule?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Declaration?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode) => T;
  Initialisation?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode) => T;
  Grouping?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  Conjunction_head?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  Conjunction_tail?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Conjunction?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Composition_head?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  Composition_tail?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Composition?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Construct?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ConstructRepeat?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  ConstructOptional?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  ConstructAnywhere?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  Unit?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  anythingSelector?: (this: NonterminalNode, arg0: TerminalNode) => T;
  AnyNonTerminal?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  NonTerminal?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  AffixNonTerminal?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode, arg3: NonterminalNode, arg4: IterationNode, arg5: IterationNode, arg6: TerminalNode) => T;
  AffixParam?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Terminal?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  name?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  word?: (this: NonterminalNode, arg0: IterationNode) => T;
  quote?: (this: NonterminalNode, arg0: TerminalNode) => T;
}

export interface EIFWOBNFSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: EIFWOBNFActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: EIFWOBNFActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: EIFWOBNFActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: EIFWOBNFActionDict<T>): this;
}

export interface EIFWOBNFGrammar extends Grammar {
  createSemantics(): EIFWOBNFSemantics;
  extendSemantics(superSemantics: EIFWOBNFSemantics): EIFWOBNFSemantics;
}

declare const grammar: EIFWOBNFGrammar;
export default grammar;

